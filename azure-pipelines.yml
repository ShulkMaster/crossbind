# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  - master
  - develop

pool:
  vmImage: 'windows-latest'

variables:
  buildPlatform: 'Any CPU'
  Configuration: 'Release'
  win: 'win-x64'
  linux: 'linux-x64'
  AntlrGen: '-visitor -listener -Dlanguage=CSharp -lib CrossBind.Compiler/Lang CrossBind.Compiler/Lang/Haibt.g4'
  AntlrOut: '-o CrossBind.Compiler/Parser'
  CEngine: 'CrossBind.Engine\CrossBind.Engine.csproj'
  CEngineTest: 'CrossBind.Engine.Test\CrossBind.Engine.Test.csproj'
  Compiler: 'CrossBind.Compiler\CrossBind.Compiler.csproj'
  CompilerTest: 'CrossBind.Compiler.Test\CrossBind.Compiler.Test.csproj'
  Cli: 'CrossBind\CrossBind.csproj'
  Lang: 'CrossBind.Lang\CrossBind.Lang.csproj'
  React: 'Engine.React\Engine.React.csproj'

jobs:
  - job: FrontendCompilerBuild
    displayName: 'Frontend Compiler Build'
    steps:
      - task: DotNetCoreCLI@2
        displayName: 'Restoring CrossBind Engine'
        inputs:
          command: 'restore'
          feedsToUse: 'select'
          projects: '**/*.csproj'
          vstsFeed: 'c02610e3-ed5a-4422-8dfc-732f5bdef937'
      
      - task: ExtractFiles@1
        displayName: 'Extracting DocFx'
        inputs:
          archiveFilePatterns: 'Gen/docfx.zip'
          destinationFolder: 'Gen/docfx'
          cleanDestinationFolder: false
          overwriteExistingFiles: false

      - task: ExtractFiles@1
        displayName: 'Extracting DocFx Template'
        inputs:
          archiveFilePatterns: 'Gen/singulinkfx.zip'
          destinationFolder: 'Gen'
          cleanDestinationFolder: false
          overwriteExistingFiles: false

      - task: JavaToolInstaller@0
        displayName: 'Installing Java JRE'
        inputs:
          versionSpec: '11'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'

      - task: PowerShell@2
        displayName: 'Generating Antr parse Class'
        inputs:
          targetType: 'inline'
          script: |
            java -jar Gen/antlr.jar $(AntlrGen) $(AntlrOut)
            ls CrossBind.Compiler/Parser

      - task: DotNetCoreCLI@2
        displayName: 'Compile Plugin Interface'
        inputs:
          command: 'build'
          projects: $(CEngine)
          arguments: '--no-restore -c $(Configuration)'

      - task: DotNetCoreCLI@2
        displayName: 'Compile Front Compiler'
        inputs:
          command: 'build'
          projects: $(Compiler)
          arguments: '--no-restore --no-dependencies -c $(Configuration)'

      - task: DotNetCoreCLI@2
        displayName: 'Compile CLI & LSP Windows'
        inputs:
          command: 'build'
          projects: |
            $(Cli)
            $(Lang)
          arguments: '--no-restore --no-dependencies -c $(Configuration) -r $(win)'

      - task: DotNetCoreCLI@2
        displayName: 'Compile CLI & LSP Linux'
        inputs:
          command: 'build'
          projects: |
            $(Cli)
            $(Lang)
          arguments: '--no-restore --no-dependencies -c $(Configuration) -r $(linux)'

      - task: DotNetCoreCLI@2
        displayName: 'Compiling Test'
        inputs:
          command: 'build'
          projects: |
            $(CEngineTest)
            $(CompilerTest)
          arguments: '--no-restore --no-dependencies -c $(Configuration)'

      - task: DotNetCoreCLI@2
        name: 'TestingEngine'
        displayName: 'Xunit: Testing Engine'
        inputs:
          command: 'test'
          projects: |
            $(CEngineTest)
            $(CompilerTest)
          arguments: '--no-build -c $(Configuration) --collect:"Code Coverage"'
          testRunTitle: 'TestingEngine'
          publishTestResults: true

      - task: PowerShell@2
        name: 'MovingEngine'
        displayName: 'Moving Engine to StagingDir'
        inputs:
          targetType: 'inline'
          script: |
            mkdir $(Build.ArtifactStagingDirectory)\Engine
            Move-Item -Path .\CrossBind.Engine\bin\$(Configuration)\*.nupkg -Destination $(Build.ArtifactStagingDirectory)\Engine\
            ls .\CrossBind.Engine\bin\$(Configuration)\net6.0

      - task: DotNetCoreCLI@2
        displayName: 'Publish CLI & LSP Windows'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: |
            $(Cli)
            $(Lang)
          arguments: '--no-build --no-dependencies -c $(Configuration) -r $(win) -o $(Build.ArtifactStagingDirectory)\bin'
          zipAfterPublish: false
          modifyOutputPath: false

      - task: DotNetCoreCLI@2
        displayName: 'Publish CLI & LSP Linux'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: |
            $(Cli)
            $(Lang)
          arguments: '--no-build --no-dependencies -c $(Configuration) -r $(linux) -o $(Build.ArtifactStagingDirectory)\bin'
          zipAfterPublish: false
          modifyOutputPath: false

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            echo 'Building Docs Site'
            .\Gen\docfx\docfx.exe metadata .\Docs\docfx.json
            ls .\Docs\api
            .\Gen\docfx\docfx.exe build .\Docs\docfx.json -o $(Build.ArtifactStagingDirectory)\docs

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)
          ArtifactName: 'artifacs'
          publishLocation: 'Container'