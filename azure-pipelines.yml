# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  - master
  - develop
  - release*

pool:
  vmImage: 'windows-latest'

variables:
  major: 0
  minor: 2
  patch: 2
  prefix: $(major).$(minor).$(patch)
  Configuration: 'Release'
  win: 'win-x64'
  linux: 'linux-x64'
  CEngine: 'CrossBind.Engine\CrossBind.Engine.csproj'
  CEngineTest: 'CrossBind.Engine.Test\CrossBind.Engine.Test.csproj'
  Compiler: 'CrossBind.Compiler\CrossBind.Compiler.csproj'
  CompilerTest: 'CrossBind.Compiler.Test\CrossBind.Compiler.Test.csproj'
  Cli: 'CrossBind\CrossBind.csproj'
  Lang: 'CrossBind.Lang\CrossBind.Lang.csproj'
  React: 'Engine.React\Engine.React.csproj'

jobs:
  - job: FrontendCompilerBuild
    displayName: 'Frontend Compiler Build'
    variables:
      buildRun: $[counter(variables['prefix'], 0)]
      buildFlags: '--no-restore --no-dependencies -c $(Configuration)'
      publishFlags: '--no-build --no-dependencies -c $(Configuration)'
      ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
        versionFlag: '-p:VersionPrefix=$(prefix) -p:AssemblyVersion=$(prefix)'
      ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
        versionFlag: '-p:VersionPrefix=$(prefix) -p:AssemblyVersion=$(prefix) --version-suffix dev.$(buildRun)'
      ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/release') }}:
        versionFlag: '-p:VersionPrefix=$(prefix) -p:AssemblyVersion=$(prefix) --version-suffix beta.$(buildRun)'
    steps:
      - task: DotNetCoreCLI@2
        displayName: 'Restoring CrossBind Engine'
        inputs:
          command: 'restore'
          feedsToUse: 'select'
          projects: '**/*.csproj'
          vstsFeed: 'c02610e3-ed5a-4422-8dfc-732f5bdef937'

      - task: GenerateReleaseNotes@0
        inputs:
          FromBuildId: '$(Build.BuildId)'
          ToBuildId: $(lastBuildId)
          ReleaseNotesPath: 'CrossBind.Engine'
          ReleaseNotesFile: 'ReleaseNotes.md'
          AdditionalNote: 'CrossBind Team'
          Test: true

      - task: ExtractFiles@1
        displayName: 'Extracting DocFx'
        inputs:
          archiveFilePatterns: 'Gen/docfx.zip'
          destinationFolder: 'Gen/docfx'
          cleanDestinationFolder: false
          overwriteExistingFiles: false

      - task: ExtractFiles@1
        displayName: 'Extracting DocFx Template'
        inputs:
          archiveFilePatterns: 'Gen/singulinkfx.zip'
          destinationFolder: 'Gen'
          cleanDestinationFolder: false
          overwriteExistingFiles: false

      - task: JavaToolInstaller@0
        displayName: 'Installing Java JRE'
        inputs:
          versionSpec: '11'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'

      - task: PowerShell@2
        displayName: 'Generating Antlr parse Class'
        inputs:
          filePath: 'Gen\setup.ps1'
          failOnStderr: true

      - task: DotNetCoreCLI@2
        displayName: 'Compile Plugin Interface'
        inputs:
          command: 'build'
          projects: $(CEngine)
          arguments: '--no-restore -c $(Configuration) $(versionFlag)'

      - task: DotNetCoreCLI@2
        displayName: 'Compile Front Compiler'
        inputs:
          command: 'build'
          projects: $(Compiler)
          arguments: '$(buildFlags) $(versionFlag)'

      - task: DotNetCoreCLI@2
        displayName: 'Compile CLI & LSP Windows'
        inputs:
          command: 'build'
          projects: |
            $(Cli)
            $(Lang)
          arguments: '-r $(win) $(buildFlags) $(versionFlag)'

      - task: DotNetCoreCLI@2
        displayName: 'Compile CLI & LSP Linux'
        inputs:
          command: 'build'
          projects: |
            $(Cli)
            $(Lang)
          arguments: '-r $(linux) $(buildFlags) $(versionFlag)'

      - task: DotNetCoreCLI@2
        displayName: 'Compiling Test'
        inputs:
          command: 'build'
          projects: |
            $(CEngineTest)
            $(CompilerTest)
          arguments: $(buildFlags)

      - task: DotNetCoreCLI@2
        name: 'TestingEngine'
        displayName: 'Xunit: Testing Engine'
        inputs:
          command: 'test'
          projects: |
            $(CEngineTest)
            $(CompilerTest)
          arguments: '--no-build -c $(Configuration) --collect:"XPlat Code Coverage"'
          testRunTitle: 'TestingEngine'
          publishTestResults: true
          
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish CodeCoverage Results'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

      - task: PowerShell@2
        name: 'MovingEngine'
        displayName: 'Copying packages'
        inputs:
          targetType: 'inline'
          script: |
            mkdir $(Build.ArtifactStagingDirectory)\Engine
            Move-Item -Path .\CrossBind.Engine\bin\$(Configuration)\*.nupkg -Destination $(Build.ArtifactStagingDirectory)\Engine\
            Move-Item -Path .\CrossBind.Compiler\bin\$(Configuration)\*.nupkg -Destination $(Build.ArtifactStagingDirectory)\Engine\
            ls $(Build.ArtifactStagingDirectory)\Engine\

      - task: DotNetCoreCLI@2
        displayName: 'Publish CLI & LSP Windows'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: |
            $(Cli)
            $(Lang)
          arguments: '-r $(win) $(publishFlags) -o $(Build.ArtifactStagingDirectory)\bin'
          zipAfterPublish: false
          modifyOutputPath: false

      - task: DotNetCoreCLI@2
        displayName: 'Publish CLI & LSP Linux'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: |
            $(Cli)
            $(Lang)
          arguments: '-r $(linux) $(publishFlags) -o $(Build.ArtifactStagingDirectory)\bin'
          zipAfterPublish: false
          modifyOutputPath: false

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            echo 'Building Docs Site'
            .\Gen\docfx\docfx.exe metadata .\Docs\docfx.json
            ls .\Docs\api
            .\Gen\docfx\docfx.exe build .\Docs\docfx.json -o $(Build.ArtifactStagingDirectory)\docs

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)
          ArtifactName: 'artifacs'
          publishLocation: 'Container'